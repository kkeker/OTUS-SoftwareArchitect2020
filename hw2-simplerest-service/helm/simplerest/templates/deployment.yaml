---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  annotations: { }
  labels:
    app: {{.Values.general.lable}}
  name: '{{.Values.general.name}}-deployment'
spec:
  replicas: {{.Values.deployment.replicaCount}}
  selector:
    matchLabels:
      app: {{.Values.general.lable}}
  strategy:
    rollingUpdate:
      maxSurge: {{.Values.deployment.rollingSettings.maxSurge}}
      maxUnavailable: {{.Values.deployment.rollingSettings.maxUnavailable}}
    type: "RollingUpdate"
  template:
    metadata:
      annotations: { }
      labels:
        app: {{.Values.general.lable}}
    spec:
      containers:
        - image: '{{.Values.deployment.docker.image}}:{{.Values.deployment.docker.tag}}'
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            initialDelaySeconds: {{.Values.healthcheck.liveness.initialDelaySeconds}}
            periodSeconds: {{.Values.healthcheck.liveness.periodSeconds}}
            tcpSocket:
              port: {{.Values.deployment.port}}
          name: '{{.Values.general.name}}-deployment'
          ports:
            - containerPort: {{.Values.deployment.port}}
              protocol: {{.Values.deployment.protocol}}
          readinessProbe:
            initialDelaySeconds: {{.Values.healthcheck.readiness.initialDelaySeconds}}
            periodSeconds: {{.Values.healthcheck.readiness.periodSeconds}}
            tcpSocket:
              port: {{.Values.deployment.port}}
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: '{{.Values.general.name}}-secret'
                  key: couchDbUsername
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: '{{.Values.general.name}}-secret'
                  key: couchDbPassword
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: '{{.Values.general.name}}-secret'
                  key: couchDbUrl
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: '{{.Values.general.name}}-secret'
                  key: couchDbBaseName
          volumeMounts:
            - name: config
              mountPath: /home/ballerina/ballerina.conf
              subPath: ballerina.conf
      volumes:
        - name: config
          configMap:
            name: {{.Values.deployment.ballerinaConfigFile}}
      nodeSelector: { }